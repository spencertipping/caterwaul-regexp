caterwaul.js_all()(function(a){a.regexp(r,options)=a.regexp.parse.apply(this,arguments),a.regexp.syntax=regexp_ctor/-a.syntax_subclass/regexp_methods,a.regexp.parse=regexp_parse,a.regexp.compile=regexp_compile,where[regexp_ctor(xs=arguments)=where[data=xs[0],context=xs[1]][data instanceof this.constructor?this-se[it.data=data.data,it.length=0,it.context=data.context]:this-se[it.data=data,it.length=0,it.context=context,Array.prototype.slice.call(xs,2)*![it.push(x)]-seq]],regexp_methods=capture[i()=this.context.flags.i,m()=this.context.flags.m,g()=this.context.flags.g,concat(x)=new this.constructor(",",this.context,this,x),match_groups()=this.context.groups,referenced_group()=this.context.groups[this[0].data-1],is_zero_width()=/^[\^\$]$|^\\[Bb]$/.test(this.data)||this.is_positive_lookahead()||this.is_negative_lookahead(),is_one_or_more()=/^\+\??$/.test(this.data),is_zero_or_more()=/^\*\??$/.test(this.data),is_optional()=/^\?$/.test(this.data),is_non_greedy()=/.\?$/.test(this.data),is_repetition()=/^[\+\*\{]\??$|^\?$/.test(this.data),repeated_child()=/^\{/.test(this.data)?this[2]:this[0],is_character_class()=/^\[/.test(this.data),is_single_escape()=/^\\.+$/.test(this.data),is_range()=/^-$/.test(this.data)&&this.length===2,is_atom()=!this.length,is_any_group()=/^\(/.test(this.data),is_group()=/^\($/.test(this.data),is_forgetful()=/^\(\?:$/.test(this.data),is_positive_lookahead()=/^\(\?=$/.test(this.data),is_negative_lookahead()=/^\(\?!$/.test(this.data),is_backreference()=/^\\$/.test(this.data),is_disjunction()=/^\|$/.test(this.data)&&this.length===2,is_join()=/^,$/.test(this.data)&&this.length===2,lower_limit()=/^\+\??$/.test(this.data)?1:/^\*\??$|^\?$/.test(this.data)?0:/^\{/.test(this.data)?this[0].data:raise[new Error("lower limit is undefined for nonrepetitive node #{this}")],upper_limit()=/^[\*\+]\??$/.test(this.data)?Infinity:/^\?$/.test(this.data)?1:/^\{/.test(this.data)?this[1].data:raise[new Error("upper limit is undefined for nonrepetitive node #{this}")],minimum_length()=this.is_zero_width()?0:this.is_single_escape()||this.is_character_class()?1:this.is_repetition()?this.lower_limit()*this.repeated_child().minimum_length():this.is_group()||this.is_forgetful()?this[0].minimum_length():this.is_backreference()?this.referenced_group().minimum_length():this.is_disjunction()?this[0].minimum_length()/-Math.min/this[1].minimum_length():this.is_join()?this[0].minimum_length()+this[1].minimum_length():this.data.length,toString()=this.is_any_group()?this.data+this[0].toString()+")":this.is_character_class()?this.data+this[0].toString()+"]":this.is_range()?"#{this[0].toString()}-#{this[1].toString()}":this.is_zero_or_more()||this.is_one_or_more()||this.is_optional()?this[0].toString()+this.data:this.is_repetition()?this[2].toString()+(this[0].data===this[1].data?"{#{this[0].data}}":this[1].data===Infinity?"{#{this[0].data},}":"{#{this[0].data},#{this[1].data}}"):this.is_zero_width()?this.data:this.is_backreference()?"\\#{this[0].data}":this.is_disjunction()?"#{this[0].toString()}|#{this[1].toString()}":this.is_join()?"#{this[0].toString()}#{this[1].toString()}":this.is_atom()?/^\w{2,}$/.test(this.data)?"(?:#{this.data})":this.data:this.data],regexp_compile(r)=new RegExp(r.toString(),[r.i()?"i":"",r.m()?"m":"",r.g()?"g":""].join("")),regexp_parse(r,options)=join(toplevel,end)({i:0})-re[it?it.v[0]:raise[new Error("caterwaul.regexp(): failed to parse #{r.toString()}")]]-where[settings={atom:"character"}/-a.merge/options,pieces=/^\/(.*)\/([gim]*)$/.exec(r.toString())||/^(.*)$/.exec(r.toString()),s=pieces[1],flags=pieces[2]-re-{i:/i/.test(it),m:/m/.test(it),g:/g/.test(it)},context={groups:[],flags:flags},added_groups={},add_group(node,p)=context.groups.push(node)-se[added_groups[p.i]=true]-unless[added_groups[p.i]],node(xs=arguments)=new a.regexp.syntax(xs[0],context)-se-Array.prototype.slice.call(xs,1)*![it.push(x)]/seq,oneof(c)(p)=p.i<s.length&&c.indexOf(s.charAt(p.i))!==-1&&{v:s.charAt(p.i),i:p.i+1},string(cs)(p)=p.i<s.length&&s.substr(p.i,cs.length)===cs&&{v:s.substr(p.i,cs.length),i:p.i+cs.length},not(n,f)(p)=p.i>=s.length||f(p)?false:{v:s.substr(p.i,n),i:p.i+n},any(n)(p)=p.i<s.length&&{v:s.substr(p.i,n),i:p.i+n},alt(ps=arguments)(p)=ps|[x(p)]|seq,many(f)(p)=p/~![f(x)||null]-seq-re-{v:it.slice(1)*[x.v]-seq,i:it[it.length-1].i}/when[it.length>1],join(ps=arguments)(p)=ps/[p][x0&&x(x0)-se[it&&ns.push(it.v)]]-seq-re-{v:ns,i:it.i}/when.it-where[ns=[]],zero(p)=p,map(parser,f)(p)={v:f.call(result,result.v),i:result.i}-when.result-where[result=parser(p)],ident=oneof("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_"),digit=oneof("0123456789"),hex=oneof("0123456789ABCDEFabcdef"),number=many(digit)/-map/"+_.join('')".qf,end(p)=p.i===s.length&&p,toplevel(p)=toplevel(p),term(p)=term(p),atom(p)=atom(p),toplevel=map(no_pipes/oneof("|")/-join/toplevel,"node('|', _[0], _[2])".qf)/-alt/no_pipes-where[no_pipes(p)=no_pipes(p),no_pipes=map(term/-join/no_pipes,"node(',', _[0], _[1])".qf)/-alt/term],term=map(atom/-join/modifiers,"_[1] -se- it.push(_[0])".qf)/-alt/atom-where[star=oneof("*")/-map/node,plus=oneof("+")/-map/node,question_mark=oneof("?")/-map/node,repetition=map(oneof("{")/number/-join/oneof("}"),"node('{', node(_[1]), node(_[1]))".qf)/map(oneof("{")/number/oneof(",")/-join/oneof("}"),"node('{', node(_[1]), node(Infinity))".qf)/-alt/map(oneof("{")/number/oneof(",")/number/-join/oneof("}"),"node('{', node(_[1]), node(_[3]))".qf),modifier=star/plus/-alt/repetition,non_greedy=oneof("?"),modifiers=map(modifier/-join/non_greedy,"_[0] -se [it.data += _[1]]".qf)/modifier/-alt/question_mark],atom=base-where[positive_lookahead=map(string("(?=")/toplevel/-join/string(")"),"node('(?=', _[1])".qf),negative_lookahead=map(string("(?!")/toplevel/-join/string(")"),"node('(?!', _[1])".qf),forgetful_group=map(string("(?:")/toplevel/-join/string(")"),"node('(?:', _[1])".qf),group=map(string("(")/toplevel/-join/string(")"),"node('(', _[1]) -se- add_group(it, this)".qf),word=map(many(ident),"node(_.join(''))".qf),word_term=map(string("(?:")/word/-join/string(")"),"node(_[1])".qf),character_class(p)=character_class(p),character_class=map(each/-join/character_class,"node(',', _[0], _[1])".qf)/-alt/each-where[each=map(any(1)/oneof("-")/-join/any(1),"node('-', node(_[0]), node(_[2]))".qf)/map(oneof("\\")/-join/any(1),"node(_.join(''))".qf)/-alt/map(not(1,oneof("]")),node)],character_not_in=map(string("[^")/character_class/-join/string("]"),"node('[^', _[1])".qf),character_in=map(string("[")/character_class/-join/string("]"),"node('[',  _[1])".qf),zero_width=oneof("^$")/-map/node,escaped=map(oneof("\\")/-join/oneof("BbWwSsDdfnrtv0*+.?|()[]{}\\$^"),"node(_.join(''))".qf),escaped_slash=map(string("\\/"),"node('/')".qf),control=string("\\c")/-join/any(1)/-map/"node(_.join(''))".qf,hex_code=string("\\x")/hex/-join/hex/-map/"node(_.join(''))".qf,unicode=string("\\u")/hex/hex/hex/-join/hex/-map/"node(_.join(''))".qf,backreference(p)=map(oneof("\\")/digit/-join/digit,"+'#{_[1]}#{_[2]}'".qf)(p)-re[it&&it.v<=context.groups.length?{v:node("\\",node(it.v)),i:it.i}:single_digit_backreference(p)]-where[single_digit_backreference=map(oneof("\\")/-join/digit,given.xs in node("\\",node(+xs[1])))],dot=oneof(".")/-map/node,other=not(1,oneof(")|+*?{"))/-map/node,maybe_word=settings.atom==="word"?map(many(ident),"node(_.join(''))".qf)/-alt/other:other,maybe_munch_spaces=settings.atom==="word"?many(oneof(" "))/-alt/zero:zero,base=map(maybe_munch_spaces/-join/alt(positive_lookahead,negative_lookahead,forgetful_group,group,character_not_in,character_in,zero_width,escaped,escaped_slash,control,hex_code,unicode,backreference,dot,maybe_word),"_[1]".qf)]]]})(caterwaul);